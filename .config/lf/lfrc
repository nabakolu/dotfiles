set icons
set drawbox
set mouse
set info "size:time"

set previewer ~/.config/lf/preview
set cleaner ~/.config/lf/cleaner
set cursorpreviewfmt "\033[7m"

set ratios 2:3

cmd on-cd &{{
    # display git repository status in your prompt
    source /usr/share/git/completion/git-prompt.sh
    git=$(__git_ps1  " î‚ %s ") || true
    fmt="   \033[1;34m%d\033[0;1m%f\033[33;1m$git\033[0m"
    lf -remote "send $id set promptfmt \"$fmt\""
}}

cmd redraw_hack &{{
	sleep 0.1
	xdotool key "control+r"
}}

cmd wget ${{
	printf "Download: "
	read ans
	wget $ans
}}

cmd open ${{
	filetype=$(file --mime-type "$f" -bL)
	case $filetype in
	application/javascript|text/*|application/json|inode/x-empty) $EDITOR "$f";;
	audio/*) mocp "$f";;
	*) if [ "$(xdg-mime query default $filetype)" = "" ]
	then
		clear
		echo "no default"
		sleep 0.5
	else
		nohup xdg-open "$f" > /dev/null 2>&1&
	fi;;
esac
}}


cmd devour ${{
	filetype=$(file --mime-type "$f" -bL)
	case $filetype in
	application/javascript|text/*|application/json|inode/x-empty) $EDITOR "$f";;
	audio/*) mocp "$f";;
	*) if [ "$(xdg-mime query default $filetype)" = "" ]
	then
		clear
		echo "no default"
		sleep 0.5
	else
		devour xdg-open "$f"
	fi;;
esac
}}

cmd bash ${{
	/bin/bash
}}

cmd bulk ${{
	set -f
	echo $fx | sed 's/ \//\n\//g' | tee ~/.cache/bulkold > ~/.cache/bulknew
	$EDITOR ~/.cache/bulknew
	n=1
	cat ~/.cache/bulknew |
		while read -r line; do
			sed -i "$n s|$| $line|g" ~/.cache/bulkold
			n=$(($n + 1))
		done

	sed -i "s/^/mv -vi \"/g" ~/.cache/bulkold
	sed -i "s/ \//\" \"\//g" ~/.cache/bulkold
	sed -i "s/$/\"/g" ~/.cache/bulkold
	sh ~/.cache/bulkold
}}


cmd open_pager ${{
	bat $f || less $f
}}

cmd open_mocp &{{
	mocp -l $f
}}

cmd open_umpv &{{
	nohup umpv "$f" > /dev/null 2>&1&
}}

cmd open_mpv &{{
	nohup mpv "$f" > /dev/null 2>&1&
}}

cmd open_qutebrowser &{{
	nohup qutebrowser $f > /dev/null 2>&1&
}}

cmd open_firefox &{{
	nohup firefox $f > /dev/null 2>&1&
}}

cmd open_editor_dir ${{
	$EDITOR .
}}

cmd open_sxiv &{{
	nohup sxiv "$f" > /dev/null 2>&1&
}}

cmd open_gimp &{{
	gimp $f
}}

cmd open_mocp ${{
	mocp -l "$f"
}}

cmd open_masterpdfeditor4 &{{
	nohup masterpdfeditor4 "$f" > /dev/null 2>&1&
}}

cmd open_pywal ${{
	wal -t -i $f --backend wal
	betterlockscreen -u $f
	theme
}}

cmd open_pywal_light ${{
	wal -l -t -i $f --backend wal
	betterlockscreen -u $f
	theme
}}

cmd open_zathura ${{
    nohup zathura "$f" > /dev/null 2>&1&
}}

cmd open_zaread ${{
    nohup zaread "$f" > /dev/null 2>&1&
}}

cmd set_wallpaper ${{
	feh --bg-scale $f
	betterlockscreen -u $f
}

cmd full_find ${{
	lf -remote "send $id set findlen 0"
	lf -remote "send $id find"
}}

cmd fzf_find ${{
	res="$(find . -maxdepth 1 | fzf --reverse --header='Jump to location')"
	lf -remote "send $id select \"$res\""
}}

cmd short_find ${{
	lf -remote "send $id set findlen 1"
	lf -remote "send $id find"
}}

cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir "$ans"
}}

cmd mkfile ${{
  printf "File Name: "
  read ans
  touch "$ans"
}}

cmd chmod ${{
  printf "Mode Bits: "
  read ans

  for file in "$fx"
  do
    chmod $ans $file
  done

  lf -remote 'send reload'
}}

cmd img ${{
	clear
	img $f 0 0 100 100
}}

cmd link %{{
    for file in $(lf -remote 'load'); do
        if [ ! -n "${mode+1}" ]; then
            mode="$file"
            continue
        fi
        files+=("$file")
    done
    if [ "${#files[@]}" -lt 1 ]; then
        lf -remote "send $id echo no files to link files: ${files}"
        exit 0
    fi
    # symbolically  copy mode is indicating a soft link
    if [[ "$mode" == copy ]]; then
        ln -sr $files -t .
    # while a move mode is indicating a hard link
    elif [[ "$mode" == move ]]; then
        ln $files -t .
    fi
}}

# Archive bindings
cmd unarchive ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.7z) 7z x "$f" ;; 
      *.tgz) tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *.tar.xz) tar -xvf "$f" ;;
	  *.rar) unrar x "$f" ;;
	  *.gz) gunzip "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}

cmd zip ${{
	printf "Archive Name: "
	read ans
	prefix="$(pwd)/"
	echo "$fx" | grep -oP "^$prefix\K.*" | zip -r $ans -@
}}

cmd gzip ${{
	gzip "$fx"
}}

cmd tar ${{
	printf "Archive Name: "
	read ans
	ans=${ans%".tar"}
	ans+=".tar"
	prefix="$(pwd)/"
	echo "$fx" | grep -oP "^$prefix\K.*" | tar cvf "$ans" -T -
}}

cmd targz ${{
	printf "Archive Name: "
	read ans
	ans=${ans%".tar.gz"}
	ans+=".tar.gz"
	prefix="$(pwd)/"
	echo "$fx" | grep -oP "^$prefix\K.*" | tar cvzf "$ans" -T -
}}

cmd tarbz2 ${{
	printf "Archive Name: "
	read ans
	ans=${ans%".tar.bz2"}
	ans+=".tar.bz2"
	prefix="$(pwd)/"
	echo "$fx" | grep -oP "^$prefix\K.*" | tar cjvf "$ans" -T -
}}

cmd follow_link %{{
  lf -remote "send ${id} select '$(readlink $f)'"
}}

cmd trash ${{
    IFS=$'\n'
    for file in $(echo $fx | sed 's/ \//\n\//g')
    do
        trash "$file"
    done
}}

cmd trash-restore ${{
    trash-restore
}}

cmd trash-restore-global ${{
    trash-restore /
}}

cmd yank-path $printf '%s' "$fx" | xclip -i -selection clipboard

cmd dragon %dragon-drop -a -x "$fx"

map a
map b
map c
map d
#map e
map f
map g
map h
map i
map j
map k
map l
map m
map n
map o
map p
map q
map r
map s
map t
map u
map v
map w
map x
map y
map z

map h updir
map j down
map k up
map l open

map q quit
map <enter> open
map <c-j> open

map rm trash
map tr trash-restore
map tR trash-restore-global
map TR trash-restore-global
map i rename
map I :rename; cmd-home
map A :rename; cmd-end
map C :rename; cmd-end; cmd-delete-home
map br bulk

map Y yank-path

map y copy
map d cut
map p : paste; clear

map n search-next
map N search-prev

map v img

map md mkdir
map mf mkfile
map cm chmod
map ml link

map f short_find
map <c-f> fzf_find

map S bash

# open specific
map ol open_pager
map oM open_mocp
map om open_mpv
map Om open_umpv
map of open_firefox
map os open_sxiv
map og open_gimp
map ow open_pywal
map oW open_pywal_light
map oP open_masterpdfeditor4
map oq open_qutebrowser
map oz open_zathura
map oZ open_zaread
map v  open_editor_dir
map oo devour

map sw set_wallpaper

map D dragon

map wg wget

# Settings
map . set hidden!

# Archive Mappings
map az zip
map at tar
map ag targz
map ab tarbz2
map au unarchive
map aG gzip

# Movement
map gc cd ~/.config
map gm cd ~/Music
map gb cd /usr/local/bin
map g/ cd /
map ge cd /etc
map gM cd /media
map gw cd ~/.config/wallpapers
map gd cd ~/Downloads
map gs cd ~/screenshots
map gl cd ~/.local
map gL follow_link

# Mouse mappings
map <m-down> down 
map <m-up> up
map <m-1> open
map <m-2> updir

map cc clear
map u unselect


on-cd
redraw
set hidden!
set hidden!
